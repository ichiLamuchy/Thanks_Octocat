First Class Function
    function can be used the same as other variables. 
    it can be passed as a parameter / argument
    (see --- first-class-fn.js ---)

module
      require to receive module.export on module file 
      (see --- module_01 folder ---)
      when you first get, it is an empty object. 
      You will be overwriting it by assign function
  
require 
      can recognise different type of files such as js, json and etc 
      (on module.js  extentions are property name on a object and the values are function to sort things out)
      
      When you require file without extension of js, it will look for one with.js (see --- module.js ---)
      If not existing the js file, then it will look for the same name folder, 
      so let’s say if you have a folder called greet and require (‘./greet’), all the files in the folder will be required.
	    
      In this case you can create multiple files, organise them with index.js

exports 
	is short hand of module.export as exports is parameter of the IIFE wrapped the module.  
	However when you assign exports, you need to mutate the object such as
	export.greet = function (){}
	Instead of exports = function…
	It will dereference from what module.exports points at, will point at just the function 
	module.exports remain to points at the same object. 
	This is odd js behaviour 

Native (core) Module 
	You can require each library which are not global as
		var util = require ('util');
	When you don’t need to specify the location, the js will look into the core.


Events
	1: System Events come from C++ Core Libuv
		Events coming from computer syetem such as finishe reading file, received data etc whch js doesnt have
	2: Custom Events - Javascript core Event Emitter
		When events occers in libuv, it generates custom event often. JS side is faking it

Inheriting from EventEmitter
	Method inherits ->it makes superCtor’s prototype set as ctor(your constructor)
	So you can access to superCtor’s prototype.
	It almost like making a plug in(points at) called prototype object in between the objects, 
	so your object can access to target object's properties 
	(i.e. util.inherits (Greeter, EventEmitter) )
	// Greeter constructor inherits all EventEmitter prortotype,it stays on prototype chaine below Greeter.prototype

EventEmitter
	you can pass the data add it on as argument. 
	.on works as it can assign listener. .emit will invoke all ilsters already stored in array

call & apply methods
	obj.greet();
	obj.greet.call(); // when you add parameter, that is become the object 'this' would point at 
		obj.greet.call({name: ‘Jane Doe}, param, param);
		obj.greet.apply({name: ‘Jane Doe}, [param, param]); 
	
	Function Greetr (){
		EventEmitter.call(this);
		//'this' will be point at empty object created with new key word
		// will allow new object to take all properties and methods that attached directly to the constructor 
		//not only ones attached to proto type when you use inherits method
		this.greeting = ‘Hello world’;
	}
	
None-blocking Asynchronous code
	While V8 is synchronously working, libuv within node architecture send requests to OS syste. 
	Inside libuv, there a queue of any events has completed. Libuv comstantly check the queue.
	call-back will be called when each events completed.
	JS is Synchronous
	Node js is Asynchronous

Buffer 	
	global. no need to use require ('');
	var buf = new Buffer (‘Hello’, ‘utf8’) 	// uft8 is default
	// it means encode Hello in binary
	buf.toString();     			//to get it back to string
	buf.toJSON();
	//give you back {type; ‘Buffer’, data: [72, 102, 108, 108, 111]}
	buf.write
	stream runs then data will be in buffer then the set of data in buffere will be proceed.
	buffer sits on the heap in V8
	
Buffer on readable
	once data was read anf filled up buffer, listener was envocked, 
	it will be carried on untill all the data was read. 
	readable.on ('data', function (chunk){
		condole.log (chunk);
	}

fs is file system
	We are dealing with files on our operationg system, 
	so we are dealing with, normally binary data.
	fs.readFile is asynchronously run. So the function may excute after the line below
	(see --- fs folder ---)

error first call back
	callbacks take an error object as their first parameter.
	if no error, you are given null then goes to secound param
		var greet2 readFile (__dirname + './greet.txt', function (err, data){
			//this is an event loop called error first call back
			console.log (data); // you get buffer with binary data of the txt
		});

ReadStream
	CreateReadStream (takes full path as param) is return to new ReadStream (constructer ) it's inherit from Readable, 
	Readable inherit from Stream. Stream inherit from EventEmitter (in events). 
	So when you assine CreatReadStream to var, the variable can use all method of EventEmitter.
	opetion can be adderd on as second param ( i.e. {encoding: 'utf8', highWaterMark (bytes): 1024})

writable
	add writeble.write(chunk) on listner function on readable after createWriteStream
	
pipe
	is prototype method on Readable (dest, option) simply as you do manually using .on together with debug 
	(_stream_readable.js) return destination after all piped (so you can chaining)

zlib
	createGzip - both readable and writable (see ***** gzip folder ******)
	
	

ES6 examples (V8 supports ES6)
	export function greet(){ console.log (‘Hello’); }
	//Use export on function it means module.exports
	//App.js side, you can import anything that has that export tag on it using import keyword.
	Import * as greetr from ‘greet’;
	greetr.greet();
	
	Template literal (back tick - it telling js that it will be template literal)
		Var greet2 = `Hello ${name}`;
	
	ES6 Class is different to other language class
	You need to know prototype chain 
	'use strict'
	Class Person {
		constructor (firstname, lastname){
		this.firstname = firstname;
		this.lastname = lastname;
		}
		// it will be directly attached to Person
		greet (){
			Console.log (‘Hello’  + this.firstname + ‘ ‘ this.lastname);
		}
		// this will be put under prototype
	}

	ES6 typed array
		var buffer = new ArrayBuffer (8); 	// 8bytes (64 bits)
		var view = new Int32Array (buffer); 	// giviing buffer to deal with
		view [0] = 5;
		view [1] = 15;
		console.log (view]; 
		//Int32Array {‘0’:5, ‘1’:15}
		// this holds only 2 numbers
	ArrayBuffer is new feature in JS nothing to do with Node
	When I read from array, I am actually reading from buffer
	If I change the array (int32Array) I will actually changing buffer. 

	
	
When you use ES6 on VS code
	add jsconfig.json file with (check it might have changed)
	{
	    "CompilerOptions :{
	    "target" : "ES6"
	    }
  
Using require(‘./whatever_path.js)  && module.exports
        
        What is happening under the hood

        whatever_yourmodule.js has module.js underneath
        module.js is one of javaScript files that built into Node

        Node wraps codes (module code) inside a function expression
        So then Node actually invokes the function

                (function (exports, require, module, __filename, __dirname){
                      // your code here together with module.export =
                });
                fn (module.exports, require, module, filename, dirname);
                return module.exports;  // this is what is really coming back from require.

        require is function, that you pass the path too, 
        module.exports is what require function returns. object is passed by reference.

        This works because your code is actually wrapped in a function giving these things as function parameter. 
        Your code is the body of the function

number after ip addres + : is socket address / port, so node can listened to specific port to receive

    

Common Module Patterns (see module_patters folder)

  1: simple over write
          var greet = function (){
            console.log ('Hello world');
          };
          module.exports = greet;
          &
          var greet1 = require('./greet1');
          greet1();  
  
  2: moule.export dot object
          module.exports.greet = function (){
            console.log ('Hello world!');
          };
          &
          var greet2 = require('./greet2').greet;
          greet2();
  
  3: Constructor with new on export (by reference)
            module.exports = new Greetr
            &
            var greet3 = require('./greet3');
            greet3.greet();
            greet3.greeting = 'changed hello world';
  
  4: Basic Constructer 
            module.exports = Greetr
            &
            var Greet4 = require('./greet4'); 
            var grtr = new Greet4(); 
            grtr.greet()
  
  5: revealing module pattern 
            module.export = {
                greet:greet
            }
            &
            var greet5 = require ('./greet5').greet;
            greet5();
  
  
  ******* some operation tip *******
  
  .on ('data', listener(callback))
  var readable = fs.createReadStream (_dirname + 'mytext.txt', {encoding:'utf8'} ) // you can use .on .emit etc on readable
  
