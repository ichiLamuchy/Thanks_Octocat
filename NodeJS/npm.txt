
NPM
Package manage
Software automates installing and updating managing



nodemon 
	instal globally as it will monitor node runing, so you use iton every project
	npm install -g nodemon
		//will make node_module folder globally (each packet also have node_module foolde)
	nodemon app.js
		//to start
		
		
version upload
	nmp upload
	
	
cli 
	commandline interface, 
	You sometimes have utility and that same name with -cli
	Which means that you have utility probably that you are going to use in code. 
	Another one of the utility is for just typing into the command line


enviroment variables 
	grobal variables specific to the enviroments (server) our code lives in
	
middleware with express
	app.use('/assets', express.static(__dirname + '/public'));

	app.get('/', function (req, res){
    		res.send('<html><head><link href=assets/style.css type = text/css rel = stylesheet />
		</head><body><h1>Hello world!</h1></body></html>');
	});
	
	app.use ('/', function (req, res, next){
     		console.log('request url: ' + req.url);
     		next(); 
 	});
	// this function next (3rd paramenter) is run the middleware of express
     	// get is also middle ware
     	// this is works on all pages

Basic usage of NPM (see npm_packagejson folfer)

  1: create JSON (package.json)
          
        npm init  //can do manually, too
                  //then it will ask for the name of the app (name: nodejs) so type i.e.
        nodejs-test-app 
                  //it starts with version 1 like below
	      nodejs-test-app
	      version: (1.0.0)
                  //you can write anything on description like
        NodeJS Test App
                  //then you can type entry point or leave as default
                  
                  
  2: on JSON file

        “scripts” section is useful
        {
          “scripts”: {
            “test”: “echo \ “Error: no test specified\” && exit1”
          }       
        }
        
              //“echo \ “Error: no test specified\” is the command line and giving a name called "test",  
              //so on command line, you can 
        npm test
              //Then you will get the “Error: no test specified”
              // now the first package.json was created
              
        “moment”: “^2.10.6”  // means auto update apart from major change
        “moment”: “~2.10.6”  // means auto update apart from major and minor change ( so only on the third one)


 3: update package.json at installing a package
      
        npm install moment --save
              // will save reference in the package json to this dependency

              Once you hit enter, it will download the package, node_module folder will be created
              In the folder, moment is : downloaded. So some people use NPM even they are not using node.
              It will also update dependancy.
	      
        npm install jasmine-node --save-dev
              // for need it during development period but not need to have fot run my app
              //Jasmine is automate test
              //You will aso see “devDepandancy” name on package.json
        

  4: GitHub
  
  So if you make repo on github, you don’t need to put the moment package on github. 
  You just make sure upload the package.json
  Go on to your project folder on bash then type npm install on command line,
  All necessary files will be downloaded regarding to the JSON file

  
  5: use require on entry file
    
          var moment = require (‘moment’);
                // first look for node core, if not existing then looking for other places 
                //One of the place is the node_modules folder in your app. 



  
Express basics (see express_http folder)

	var port = process.env.PORT || 3000;
		// process is global variable which env's PORT 
		//(var PORT you would sent on server)
	
	app.get('/', function (req, res){
    		res.send('<html><head></head><body><h1>Hello 
		world!</h1></body></html>');
	});
		// so it is like if statement
		// get is a GET verb
		//when you see'/' (homepage), the function fires

	on route of page, you can use : for variable such as
		app.get ('/person/:id', function(req, res){
		    res.send('<html><head></head><body><h1>
		    Person: ' + req.params.id + '</h1></body></html>');
		});
		//:id can be anything 
		//it is variable which can be used in your code as above


Template

	Express come with ability to plug in a whole variety of template engines.

	View engines: developer like to use their own favourite template.
	So express gave an ability to plug in to build your own
	Template engines, that would then output on the response stream, back down to http response.

	
    How to set template

	1; you set view engine by
		app.set (‘view engine’, ‘jade’);
			//2nd param is the file extension
			//By default the express framework looking for file called views
			//It will hooked by this set, so no need for require function

	2: then build a template ( often look like html) some are not like jade
		Make views folder
		Make index file with link to stylesheet and all others


	3: on app.js, instead of using res.send to manually send all the text, 
		use res.render to render the file name in the param. 
		It will look for the file on the render parameter with the extension which give on where view was set.

	
	
	Ejs 
		Inspired by asp.net web forum
		Using <% %>	for java script code, if you need use html tag the close it first.
		This html on this file is run by browser. Not node. Once put delimiters then 
		Ejs would be running that inside node. 

	
		Out putting on ejs file
			Using = 
			i.e. <h1> Person: <%= ID %>
				//This means that variable ID should be somewhere on js file
				//You could do also a thing like ID.length

			app.get (‘/’, function (req, res){
				res.render (‘person’, {ID: req.param.id}); 
				//2nd param is data
			});

			make sure that href start with ‘/’ if you wanna start it from the root



	How to GET

		1: second param on render method on res on app.js
			Qstr: req.query.qstr

				// it means that variable Qstr set in object as a data on the method, 
				// so you can use it on the file on the first param

			<h2>Querystring Value: <%= Qstr %></h2>
				//On person.ejs 
				//it will publish on here if the variable existing. 

		2: go to url and type ?qstr=whatever
			This will be assigned as on req.query.qstr




	How to POST
	
		Need to parse it on body
		So go to expressjs.com check middleware, check body-parser

		Body parser

		1: you need to require - unlike view engine, it wont hook automatically
				Then make 
			var urlencodedParser = bodyParser.urlencoded ({extended: false});
				To use it on app.post


		2: make form on html and make sure 
			method = ‘POST” action=’/person’
				Post this (encode xml url encoded post with the sequence of strings and values 
				in the body of HTTP request) to person

		3: HTTP POST that then handle by app.post on app.js, 
				because it matched this url ‘/person’, 
				then body parser is taking the body of HTTP request and giving you each vaue
			
			app.post('/person', urlencodedParser, function(req, res) {
    				res.send ('thank you!');
    				console.log (req.body.firstname);
    				console.log (req.body.lastname);
			});

	JSON parser 

		1: it is a part of body-parser so if you havent required do the first
				Then 
			var jsonParser = bodyParser.json();
				To use it on app.post

		2. On index.ejs write on script tag such as 
		       <script>
			   $.ajax({
			       type: 'POST',
			       url: '/personjson',
			       data: JSON.stringify({
				   firstname: 'Ichi',
				   lastname: "LaMuchy"
			       }),
			       dataType: 'json',
			       contentType: 'application/json'
			   });
		       </script>
		(put JQuery on src =)

		Node will get this http request then pot onto jsonParser




